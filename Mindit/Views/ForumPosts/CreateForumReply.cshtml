@model Mindit.Models.ForumPost

@{
    ViewData["Title"] = "CreateForumReply";
}

<div>
    <table class="ReplyTable table-borderless table-responsive">

            <tr>
                <td>
                    <h1>@Model.postTitle</h1>
                </td>
            </tr>
            <tr>
                <td>
                        @*@Html.DisplayFor(modelItem => item.classIcon)*@
                    <span style="font-size:10pt">
                        Posted by
                            @Html.DisplayFor(modelItem => Model.authorName)
                        at
                            @Html.DisplayFor(modelItem => Model.postDate)
                    </span>
                </td>
            </tr>
            <tr>
                <td>
                    <span style="font-size:14pt">@Html.DisplayFor(modelItem => Model.postBody)</span>
                </td>
            </tr>
        <tr>
            <td>

                @{
                    var upvoteImgUrl = "~/Images/upvoteIconEmpty.png";
                    var initUpvoteValue = "upvoteEmpty";
                    if (Model.postVotes.Any(p => p.userName == User.Identity.Name))
                    {
                        if (Model.postVotes.FirstOrDefault(p => p.userName == User.Identity.Name).voteStyle == "upvoteFull")
                        {
                            upvoteImgUrl = "~/Images/upvoteIconFull.png";
                            initUpvoteValue = "upvoteFull";
                        }
                    }
                }
                <button class="postVoteButton" name="upvoteButton" id="upvoteButton @Model.PostId" type="submit" value=@initUpvoteValue onclick="ClickVoteButton(@Model.PostId, this, voteCountText@(Model.PostId))"
                        style="background-image:url(@Url.Content(upvoteImgUrl))">
                </button>


                @{
                    var postLikeSum = Model.postLikes - Model.postDislikes;
                    <span id='voteCountText@(Model.PostId)'>
                        @Html.DisplayFor(Model => postLikeSum)
                    </span>
                }


                @{
                    var downvoteImgUrl = "~/Images/downvoteIconEmpty.png";
                    var initDownvoteValue = "downvoteEmpty";
                    if (Model.postVotes.Any(p => p.userName == User.Identity.Name))
                    {
                        if (Model.postVotes.FirstOrDefault(p => p.userName == User.Identity.Name).voteStyle == "downvoteFull")
                        {
                            downvoteImgUrl = "~/Images/downvoteIconFull.png";
                            initDownvoteValue = "downvoteFull";
                        }
                    }
                }
                <button class="postVoteButton" name="downvoteButton" id="downvoteButton @Model.PostId" type="submit" value=@initDownvoteValue onclick="ClickVoteButton(@Model.PostId, this, voteCountText@(Model.PostId))"
                        style="background-image:url(@Url.Content(downvoteImgUrl))">
                </button>
            </td>
        </tr>
    </table>
</div>


<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="CreatePostReply">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <span class="control-label">Reply Text:</span>
                <textarea class="form-control"></textarea>
                <!--<span asp-validation-for="replyBody" class="text-danger"></span>-->
            </div>
            <div class="form-group">
                <!--<input type="submit" value="Post" class="btn btn-primary" />-->
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}